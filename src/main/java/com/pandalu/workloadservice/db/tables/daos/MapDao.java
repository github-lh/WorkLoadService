/*
 * This file is generated by jOOQ.
 */
package com.pandalu.workloadservice.db.tables.daos;


import com.pandalu.workloadservice.db.tables.Map;
import com.pandalu.workloadservice.db.tables.records.MapRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapDao extends DAOImpl<MapRecord, com.pandalu.workloadservice.db.tables.pojos.Map, Integer> {

    /**
     * Create a new MapDao without any configuration
     */
    public MapDao() {
        super(Map.MAP, com.pandalu.workloadservice.db.tables.pojos.Map.class);
    }

    /**
     * Create a new MapDao with an attached configuration
     */
    public MapDao(Configuration configuration) {
        super(Map.MAP, com.pandalu.workloadservice.db.tables.pojos.Map.class, configuration);
    }

    @Override
    public Integer getId(com.pandalu.workloadservice.db.tables.pojos.Map object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Map> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Map.MAP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Map> fetchById(Integer... values) {
        return fetch(Map.MAP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public com.pandalu.workloadservice.db.tables.pojos.Map fetchOneById(Integer value) {
        return fetchOne(Map.MAP.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Map> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Map.MAP.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Map> fetchByName(String... values) {
        return fetch(Map.MAP.NAME, values);
    }
}
