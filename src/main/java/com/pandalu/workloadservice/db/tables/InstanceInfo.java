/*
 * This file is generated by jOOQ.
 */
package com.pandalu.workloadservice.db.tables;


import com.pandalu.workloadservice.db.CompNetFusion;
import com.pandalu.workloadservice.db.Indexes;
import com.pandalu.workloadservice.db.Keys;
import com.pandalu.workloadservice.db.tables.records.InstanceInfoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstanceInfo extends TableImpl<InstanceInfoRecord> {

    private static final long serialVersionUID = 382763940;

    /**
     * The reference instance of <code>comp_net_fusion.instance_info</code>
     */
    public static final InstanceInfo INSTANCE_INFO = new InstanceInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstanceInfoRecord> getRecordType() {
        return InstanceInfoRecord.class;
    }

    /**
     * The column <code>comp_net_fusion.instance_info.instanceID</code>. 实例编号
     */
    public final TableField<InstanceInfoRecord, String> INSTANCEID = createField(DSL.name("instanceID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "实例编号");

    /**
     * The column <code>comp_net_fusion.instance_info.vmImageID</code>. 所在虚拟机镜像id
     */
    public final TableField<InstanceInfoRecord, String> VMIMAGEID = createField(DSL.name("vmImageID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "所在虚拟机镜像id");

    /**
     * The column <code>comp_net_fusion.instance_info.totalCpu</code>. cpu分配量
     */
    public final TableField<InstanceInfoRecord, Long> TOTALCPU = createField(DSL.name("totalCpu"), org.jooq.impl.SQLDataType.BIGINT, this, "cpu分配量");

    /**
     * The column <code>comp_net_fusion.instance_info.totalMem</code>. 内存分配量
     */
    public final TableField<InstanceInfoRecord, Long> TOTALMEM = createField(DSL.name("totalMem"), org.jooq.impl.SQLDataType.BIGINT, this, "内存分配量");

    /**
     * The column <code>comp_net_fusion.instance_info.totalDisk</code>. 存储空间分配量
     */
    public final TableField<InstanceInfoRecord, Long> TOTALDISK = createField(DSL.name("totalDisk"), org.jooq.impl.SQLDataType.BIGINT, this, "存储空间分配量");

    /**
     * The column <code>comp_net_fusion.instance_info.usedCpu</code>. cpu使用量
     */
    public final TableField<InstanceInfoRecord, Long> USEDCPU = createField(DSL.name("usedCpu"), org.jooq.impl.SQLDataType.BIGINT, this, "cpu使用量");

    /**
     * The column <code>comp_net_fusion.instance_info.usedMem</code>. 内存使用量
     */
    public final TableField<InstanceInfoRecord, Long> USEDMEM = createField(DSL.name("usedMem"), org.jooq.impl.SQLDataType.BIGINT, this, "内存使用量");

    /**
     * The column <code>comp_net_fusion.instance_info.usedDisk</code>. 磁盘使用量
     */
    public final TableField<InstanceInfoRecord, Long> USEDDISK = createField(DSL.name("usedDisk"), org.jooq.impl.SQLDataType.BIGINT, this, "磁盘使用量");

    /**
     * The column <code>comp_net_fusion.instance_info.rRequestNum</code>. 读取请求数量
     */
    public final TableField<InstanceInfoRecord, Integer> RREQUESTNUM = createField(DSL.name("rRequestNum"), org.jooq.impl.SQLDataType.INTEGER, this, "读取请求数量");

    /**
     * The column <code>comp_net_fusion.instance_info.wRequestNum</code>. 写入请求数量
     */
    public final TableField<InstanceInfoRecord, Integer> WREQUESTNUM = createField(DSL.name("wRequestNum"), org.jooq.impl.SQLDataType.INTEGER, this, "写入请求数量");

    /**
     * The column <code>comp_net_fusion.instance_info.readBytes</code>. 读取字节数
     */
    public final TableField<InstanceInfoRecord, Long> READBYTES = createField(DSL.name("readBytes"), org.jooq.impl.SQLDataType.BIGINT, this, "读取字节数");

    /**
     * The column <code>comp_net_fusion.instance_info.writeBytes</code>. 写入字节数
     */
    public final TableField<InstanceInfoRecord, Long> WRITEBYTES = createField(DSL.name("writeBytes"), org.jooq.impl.SQLDataType.BIGINT, this, "写入字节数");

    /**
     * The column <code>comp_net_fusion.instance_info.timeStamp</code>. 时间戳
     */
    public final TableField<InstanceInfoRecord, Long> TIMESTAMP = createField(DSL.name("timeStamp"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "时间戳");

    /**
     * Create a <code>comp_net_fusion.instance_info</code> table reference
     */
    public InstanceInfo() {
        this(DSL.name("instance_info"), null);
    }

    /**
     * Create an aliased <code>comp_net_fusion.instance_info</code> table reference
     */
    public InstanceInfo(String alias) {
        this(DSL.name(alias), INSTANCE_INFO);
    }

    /**
     * Create an aliased <code>comp_net_fusion.instance_info</code> table reference
     */
    public InstanceInfo(Name alias) {
        this(alias, INSTANCE_INFO);
    }

    private InstanceInfo(Name alias, Table<InstanceInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private InstanceInfo(Name alias, Table<InstanceInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InstanceInfo(Table<O> child, ForeignKey<O, InstanceInfoRecord> key) {
        super(child, key, INSTANCE_INFO);
    }

    @Override
    public Schema getSchema() {
        return CompNetFusion.COMP_NET_FUSION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INSTANCE_INFO_INS_IMG_FK, Indexes.INSTANCE_INFO_PRIMARY);
    }

    @Override
    public UniqueKey<InstanceInfoRecord> getPrimaryKey() {
        return Keys.KEY_INSTANCE_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<InstanceInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<InstanceInfoRecord>>asList(Keys.KEY_INSTANCE_INFO_PRIMARY);
    }

    @Override
    public List<ForeignKey<InstanceInfoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InstanceInfoRecord, ?>>asList(Keys.INS_IMG_FK);
    }

    public Vmimages vmimages() {
        return new Vmimages(this, Keys.INS_IMG_FK);
    }

    @Override
    public InstanceInfo as(String alias) {
        return new InstanceInfo(DSL.name(alias), this);
    }

    @Override
    public InstanceInfo as(Name alias) {
        return new InstanceInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceInfo rename(String name) {
        return new InstanceInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceInfo rename(Name name) {
        return new InstanceInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, Long, Long, Long, Long, Long, Long, Integer, Integer, Long, Long, Long> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
