/*
 * This file is generated by jOOQ.
 */
package com.pandalu.workloadservice.db.tables.daos;


import com.pandalu.workloadservice.db.tables.PmInfo;
import com.pandalu.workloadservice.db.tables.records.PmInfoRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PmInfoDao extends DAOImpl<PmInfoRecord, com.pandalu.workloadservice.db.tables.pojos.PmInfo, Record2<String, String>> {

    /**
     * Create a new PmInfoDao without any configuration
     */
    public PmInfoDao() {
        super(PmInfo.PM_INFO, com.pandalu.workloadservice.db.tables.pojos.PmInfo.class);
    }

    /**
     * Create a new PmInfoDao with an attached configuration
     */
    public PmInfoDao(Configuration configuration) {
        super(PmInfo.PM_INFO, com.pandalu.workloadservice.db.tables.pojos.PmInfo.class, configuration);
    }

    @Override
    public Record2<String, String> getId(com.pandalu.workloadservice.db.tables.pojos.PmInfo object) {
        return compositeKeyRecord(object.getUuid(), object.getPmid());
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfUuid(String lowerInclusive, String upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByUuid(String... values) {
        return fetch(PmInfo.PM_INFO.UUID, values);
    }

    /**
     * Fetch records that have <code>pmID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfPmid(String lowerInclusive, String upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.PMID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pmID IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByPmid(String... values) {
        return fetch(PmInfo.PM_INFO.PMID, values);
    }

    /**
     * Fetch records that have <code>pmName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfPmname(String lowerInclusive, String upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.PMNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pmName IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByPmname(String... values) {
        return fetch(PmInfo.PM_INFO.PMNAME, values);
    }

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfState(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByState(Integer... values) {
        return fetch(PmInfo.PM_INFO.STATE, values);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfCity(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByCity(Integer... values) {
        return fetch(PmInfo.PM_INFO.CITY, values);
    }

    /**
     * Fetch records that have <code>pmIP BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfPmip(String lowerInclusive, String upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.PMIP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pmIP IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByPmip(String... values) {
        return fetch(PmInfo.PM_INFO.PMIP, values);
    }

    /**
     * Fetch records that have <code>totalCpu BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfTotalcpu(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.TOTALCPU, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>totalCpu IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByTotalcpu(Long... values) {
        return fetch(PmInfo.PM_INFO.TOTALCPU, values);
    }

    /**
     * Fetch records that have <code>totalMem BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfTotalmem(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.TOTALMEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>totalMem IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByTotalmem(Long... values) {
        return fetch(PmInfo.PM_INFO.TOTALMEM, values);
    }

    /**
     * Fetch records that have <code>totalBand BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfTotalband(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.TOTALBAND, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>totalBand IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByTotalband(Long... values) {
        return fetch(PmInfo.PM_INFO.TOTALBAND, values);
    }

    /**
     * Fetch records that have <code>totalDisk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfTotaldisk(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.TOTALDISK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>totalDisk IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByTotaldisk(Long... values) {
        return fetch(PmInfo.PM_INFO.TOTALDISK, values);
    }

    /**
     * Fetch records that have <code>usedCpu BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfUsedcpu(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.USEDCPU, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usedCpu IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByUsedcpu(Long... values) {
        return fetch(PmInfo.PM_INFO.USEDCPU, values);
    }

    /**
     * Fetch records that have <code>usedMem BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfUsedmem(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.USEDMEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usedMem IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByUsedmem(Long... values) {
        return fetch(PmInfo.PM_INFO.USEDMEM, values);
    }

    /**
     * Fetch records that have <code>usedBand BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfUsedband(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.USEDBAND, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usedBand IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByUsedband(Long... values) {
        return fetch(PmInfo.PM_INFO.USEDBAND, values);
    }

    /**
     * Fetch records that have <code>usedDisk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfUseddisk(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.USEDDISK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usedDisk IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByUseddisk(Long... values) {
        return fetch(PmInfo.PM_INFO.USEDDISK, values);
    }

    /**
     * Fetch records that have <code>nVms BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfNvms(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.NVMS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nVms IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByNvms(Integer... values) {
        return fetch(PmInfo.PM_INFO.NVMS, values);
    }

    /**
     * Fetch records that have <code>timeStamp BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchRangeOfTimestamp(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PmInfo.PM_INFO.TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timeStamp IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.PmInfo> fetchByTimestamp(Long... values) {
        return fetch(PmInfo.PM_INFO.TIMESTAMP, values);
    }
}
