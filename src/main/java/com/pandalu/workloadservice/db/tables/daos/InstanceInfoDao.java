/*
 * This file is generated by jOOQ.
 */
package com.pandalu.workloadservice.db.tables.daos;


import com.pandalu.workloadservice.db.tables.InstanceInfo;
import com.pandalu.workloadservice.db.tables.records.InstanceInfoRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstanceInfoDao extends DAOImpl<InstanceInfoRecord, com.pandalu.workloadservice.db.tables.pojos.InstanceInfo, String> {

    /**
     * Create a new InstanceInfoDao without any configuration
     */
    public InstanceInfoDao() {
        super(InstanceInfo.INSTANCE_INFO, com.pandalu.workloadservice.db.tables.pojos.InstanceInfo.class);
    }

    /**
     * Create a new InstanceInfoDao with an attached configuration
     */
    public InstanceInfoDao(Configuration configuration) {
        super(InstanceInfo.INSTANCE_INFO, com.pandalu.workloadservice.db.tables.pojos.InstanceInfo.class, configuration);
    }

    @Override
    public String getId(com.pandalu.workloadservice.db.tables.pojos.InstanceInfo object) {
        return object.getInstanceid();
    }

    /**
     * Fetch records that have <code>instanceID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfInstanceid(String lowerInclusive, String upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.INSTANCEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>instanceID IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByInstanceid(String... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.INSTANCEID, values);
    }

    /**
     * Fetch a unique record that has <code>instanceID = value</code>
     */
    public com.pandalu.workloadservice.db.tables.pojos.InstanceInfo fetchOneByInstanceid(String value) {
        return fetchOne(InstanceInfo.INSTANCE_INFO.INSTANCEID, value);
    }

    /**
     * Fetch records that have <code>vmImageID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfVmimageid(String lowerInclusive, String upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.VMIMAGEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vmImageID IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByVmimageid(String... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.VMIMAGEID, values);
    }

    /**
     * Fetch records that have <code>totalCpu BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfTotalcpu(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.TOTALCPU, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>totalCpu IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByTotalcpu(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.TOTALCPU, values);
    }

    /**
     * Fetch records that have <code>totalMem BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfTotalmem(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.TOTALMEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>totalMem IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByTotalmem(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.TOTALMEM, values);
    }

    /**
     * Fetch records that have <code>totalDisk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfTotaldisk(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.TOTALDISK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>totalDisk IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByTotaldisk(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.TOTALDISK, values);
    }

    /**
     * Fetch records that have <code>usedCpu BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfUsedcpu(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.USEDCPU, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usedCpu IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByUsedcpu(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.USEDCPU, values);
    }

    /**
     * Fetch records that have <code>usedMem BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfUsedmem(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.USEDMEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usedMem IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByUsedmem(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.USEDMEM, values);
    }

    /**
     * Fetch records that have <code>usedDisk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfUseddisk(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.USEDDISK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>usedDisk IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByUseddisk(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.USEDDISK, values);
    }

    /**
     * Fetch records that have <code>rRequestNum BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfRrequestnum(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.RREQUESTNUM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rRequestNum IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByRrequestnum(Integer... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.RREQUESTNUM, values);
    }

    /**
     * Fetch records that have <code>wRequestNum BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfWrequestnum(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.WREQUESTNUM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>wRequestNum IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByWrequestnum(Integer... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.WREQUESTNUM, values);
    }

    /**
     * Fetch records that have <code>readBytes BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfReadbytes(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.READBYTES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>readBytes IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByReadbytes(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.READBYTES, values);
    }

    /**
     * Fetch records that have <code>writeBytes BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfWritebytes(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.WRITEBYTES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>writeBytes IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByWritebytes(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.WRITEBYTES, values);
    }

    /**
     * Fetch records that have <code>timeStamp BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchRangeOfTimestamp(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(InstanceInfo.INSTANCE_INFO.TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timeStamp IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.InstanceInfo> fetchByTimestamp(Long... values) {
        return fetch(InstanceInfo.INSTANCE_INFO.TIMESTAMP, values);
    }
}
