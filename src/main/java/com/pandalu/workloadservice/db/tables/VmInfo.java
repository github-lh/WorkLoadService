/*
 * This file is generated by jOOQ.
 */
package com.pandalu.workloadservice.db.tables;


import com.pandalu.workloadservice.db.CompNetFusion;
import com.pandalu.workloadservice.db.Indexes;
import com.pandalu.workloadservice.db.Keys;
import com.pandalu.workloadservice.db.tables.records.VmInfoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VmInfo extends TableImpl<VmInfoRecord> {

    private static final long serialVersionUID = -789571891;

    /**
     * The reference instance of <code>comp_net_fusion.vm_info</code>
     */
    public static final VmInfo VM_INFO = new VmInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VmInfoRecord> getRecordType() {
        return VmInfoRecord.class;
    }

    /**
     * The column <code>comp_net_fusion.vm_info.uuid</code>. 唯一标识符
     */
    public final TableField<VmInfoRecord, String> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "唯一标识符");

    /**
     * The column <code>comp_net_fusion.vm_info.vmID</code>. 虚拟机编号
     */
    public final TableField<VmInfoRecord, String> VMID = createField(DSL.name("vmID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "虚拟机编号");

    /**
     * The column <code>comp_net_fusion.vm_info.pmID</code>. 所在物理机编号
     */
    public final TableField<VmInfoRecord, String> PMID = createField(DSL.name("pmID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "所在物理机编号");

    /**
     * The column <code>comp_net_fusion.vm_info.vmImageID</code>. 虚拟机所属镜像ID
     */
    public final TableField<VmInfoRecord, String> VMIMAGEID = createField(DSL.name("vmImageID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "虚拟机所属镜像ID");

    /**
     * The column <code>comp_net_fusion.vm_info.vmName</code>. 虚拟机名称
     */
    public final TableField<VmInfoRecord, String> VMNAME = createField(DSL.name("vmName"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "虚拟机名称");

    /**
     * The column <code>comp_net_fusion.vm_info.status</code>. 虚拟机状态
     */
    public final TableField<VmInfoRecord, Integer> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER, this, "虚拟机状态");

    /**
     * The column <code>comp_net_fusion.vm_info.totalCpu</code>. 虚拟机cpu分配量
     */
    public final TableField<VmInfoRecord, Long> TOTALCPU = createField(DSL.name("totalCpu"), org.jooq.impl.SQLDataType.BIGINT, this, "虚拟机cpu分配量");

    /**
     * The column <code>comp_net_fusion.vm_info.totalMem</code>. 虚拟机内存分配量
     */
    public final TableField<VmInfoRecord, Long> TOTALMEM = createField(DSL.name("totalMem"), org.jooq.impl.SQLDataType.BIGINT, this, "虚拟机内存分配量");

    /**
     * The column <code>comp_net_fusion.vm_info.totalDisk</code>. 虚拟机存储空间分配量
     */
    public final TableField<VmInfoRecord, Long> TOTALDISK = createField(DSL.name("totalDisk"), org.jooq.impl.SQLDataType.BIGINT, this, "虚拟机存储空间分配量");

    /**
     * The column <code>comp_net_fusion.vm_info.totalBand</code>. 虚拟机带宽分配量
     */
    public final TableField<VmInfoRecord, Long> TOTALBAND = createField(DSL.name("totalBand"), org.jooq.impl.SQLDataType.BIGINT, this, "虚拟机带宽分配量");

    /**
     * The column <code>comp_net_fusion.vm_info.usedCpu</code>. 虚拟机cpu使用量
     */
    public final TableField<VmInfoRecord, Long> USEDCPU = createField(DSL.name("usedCpu"), org.jooq.impl.SQLDataType.BIGINT, this, "虚拟机cpu使用量");

    /**
     * The column <code>comp_net_fusion.vm_info.usedMem</code>. 虚拟机内存使用量
     */
    public final TableField<VmInfoRecord, Long> USEDMEM = createField(DSL.name("usedMem"), org.jooq.impl.SQLDataType.BIGINT, this, "虚拟机内存使用量");

    /**
     * The column <code>comp_net_fusion.vm_info.usedDisk</code>. 虚拟机存储空间使用量
     */
    public final TableField<VmInfoRecord, Long> USEDDISK = createField(DSL.name("usedDisk"), org.jooq.impl.SQLDataType.BIGINT, this, "虚拟机存储空间使用量");

    /**
     * The column <code>comp_net_fusion.vm_info.usedBand</code>. 虚拟机带宽使用量
     */
    public final TableField<VmInfoRecord, Long> USEDBAND = createField(DSL.name("usedBand"), org.jooq.impl.SQLDataType.BIGINT, this, "虚拟机带宽使用量");

    /**
     * The column <code>comp_net_fusion.vm_info.timeStamp</code>. 时间戳
     */
    public final TableField<VmInfoRecord, ULong> TIMESTAMP = createField(DSL.name("timeStamp"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "时间戳");

    /**
     * Create a <code>comp_net_fusion.vm_info</code> table reference
     */
    public VmInfo() {
        this(DSL.name("vm_info"), null);
    }

    /**
     * Create an aliased <code>comp_net_fusion.vm_info</code> table reference
     */
    public VmInfo(String alias) {
        this(DSL.name(alias), VM_INFO);
    }

    /**
     * Create an aliased <code>comp_net_fusion.vm_info</code> table reference
     */
    public VmInfo(Name alias) {
        this(alias, VM_INFO);
    }

    private VmInfo(Name alias, Table<VmInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private VmInfo(Name alias, Table<VmInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> VmInfo(Table<O> child, ForeignKey<O, VmInfoRecord> key) {
        super(child, key, VM_INFO);
    }

    @Override
    public Schema getSchema() {
        return CompNetFusion.COMP_NET_FUSION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VM_INFO_IMG_FK, Indexes.VM_INFO_PM_FK, Indexes.VM_INFO_PRIMARY);
    }

    @Override
    public UniqueKey<VmInfoRecord> getPrimaryKey() {
        return Keys.KEY_VM_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<VmInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<VmInfoRecord>>asList(Keys.KEY_VM_INFO_PRIMARY);
    }

    @Override
    public List<ForeignKey<VmInfoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VmInfoRecord, ?>>asList(Keys.IMG_FK);
    }

    public Vmimages vmimages() {
        return new Vmimages(this, Keys.IMG_FK);
    }

    @Override
    public VmInfo as(String alias) {
        return new VmInfo(DSL.name(alias), this);
    }

    @Override
    public VmInfo as(Name alias) {
        return new VmInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VmInfo rename(String name) {
        return new VmInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VmInfo rename(Name name) {
        return new VmInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, String, Integer, Long, Long, Long, Long, Long, Long, Long, Long, ULong> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
