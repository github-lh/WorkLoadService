/*
 * This file is generated by jOOQ.
 */
package com.pandalu.workloadservice.db.tables.daos;


import com.pandalu.workloadservice.db.tables.Vmimages;
import com.pandalu.workloadservice.db.tables.records.VmimagesRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VmimagesDao extends DAOImpl<VmimagesRecord, com.pandalu.workloadservice.db.tables.pojos.Vmimages, String> {

    /**
     * Create a new VmimagesDao without any configuration
     */
    public VmimagesDao() {
        super(Vmimages.VMIMAGES, com.pandalu.workloadservice.db.tables.pojos.Vmimages.class);
    }

    /**
     * Create a new VmimagesDao with an attached configuration
     */
    public VmimagesDao(Configuration configuration) {
        super(Vmimages.VMIMAGES, com.pandalu.workloadservice.db.tables.pojos.Vmimages.class, configuration);
    }

    @Override
    public String getId(com.pandalu.workloadservice.db.tables.pojos.Vmimages object) {
        return object.getVmimageid();
    }

    /**
     * Fetch records that have <code>vmImageID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchRangeOfVmimageid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vmimages.VMIMAGES.VMIMAGEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>vmImageID IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchByVmimageid(String... values) {
        return fetch(Vmimages.VMIMAGES.VMIMAGEID, values);
    }

    /**
     * Fetch a unique record that has <code>vmImageID = value</code>
     */
    public com.pandalu.workloadservice.db.tables.pojos.Vmimages fetchOneByVmimageid(String value) {
        return fetchOne(Vmimages.VMIMAGES.VMIMAGEID, value);
    }

    /**
     * Fetch records that have <code>imgSize BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchRangeOfImgsize(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Vmimages.VMIMAGES.IMGSIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>imgSize IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchByImgsize(Double... values) {
        return fetch(Vmimages.VMIMAGES.IMGSIZE, values);
    }

    /**
     * Fetch records that have <code>imgCPU BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchRangeOfImgcpu(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vmimages.VMIMAGES.IMGCPU, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>imgCPU IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchByImgcpu(String... values) {
        return fetch(Vmimages.VMIMAGES.IMGCPU, values);
    }

    /**
     * Fetch records that have <code>imgMem BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchRangeOfImgmem(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vmimages.VMIMAGES.IMGMEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>imgMem IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchByImgmem(String... values) {
        return fetch(Vmimages.VMIMAGES.IMGMEM, values);
    }

    /**
     * Fetch records that have <code>imgDisk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchRangeOfImgdisk(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vmimages.VMIMAGES.IMGDISK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>imgDisk IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchByImgdisk(String... values) {
        return fetch(Vmimages.VMIMAGES.IMGDISK, values);
    }

    /**
     * Fetch records that have <code>imgOS BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchRangeOfImgos(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vmimages.VMIMAGES.IMGOS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>imgOS IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchByImgos(String... values) {
        return fetch(Vmimages.VMIMAGES.IMGOS, values);
    }

    /**
     * Fetch records that have <code>NetworkAdapter BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchRangeOfNetworkadapter(String lowerInclusive, String upperInclusive) {
        return fetchRange(Vmimages.VMIMAGES.NETWORKADAPTER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NetworkAdapter IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchByNetworkadapter(String... values) {
        return fetch(Vmimages.VMIMAGES.NETWORKADAPTER, values);
    }

    /**
     * Fetch records that have <code>timeStamp BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchRangeOfTimestamp(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Vmimages.VMIMAGES.TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timeStamp IN (values)</code>
     */
    public List<com.pandalu.workloadservice.db.tables.pojos.Vmimages> fetchByTimestamp(Long... values) {
        return fetch(Vmimages.VMIMAGES.TIMESTAMP, values);
    }
}
